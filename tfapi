<?php
// tfapi - Transfinder video playback interface
// Request:
//      function: createsession/authorizesession/getvehiclelist/getlivevhiclelist/getplaybackcontext/getliveviewcontext/destorysession
// Return:
//      json 
// By Dennis Chen @ TME	 - 2016-09-20
// Copyright 2016 Toronto MicroElectronics Inc.
//
$noredir=1;
include "session.php" ;
include_once 'vfile.php' ;

if( empty($conn) ) {
@$conn = new mysqli("p:".$smart_host, $smart_user, $smart_password, $smart_database );
}

//	always create a new session,
//	required 'clientid' 
function createsession()
{
	$res = array(
		'status' => "ERROR"
	);
	if( empty($_REQUEST['clientid']) ) {
		$res['errormsg'] = "<clientid> required!" ;
	}
	else {
		// verify client id
		if( file_exists( "client/$_REQUEST[clientid]/config.php" ) ) {
			session_start();
			unset($_SESSION['clientid']) ;
			unset($_SESSION['transfinderTag']) ;
			header_remove("Set-Cookie") ;
			session_regenerate_id(empty($_SESSION));
			$_SESSION=array(
				'clientid' => $_REQUEST['clientid'],
				'transfinderTag' => 'transfinder' 
			);
			session_write();
			$res[session_name()] = session_id ();
			$res['status'] = "OK" ;
		}
		else {
			$res['errormsg'] = "Client $_REQUEST[clientid] not existed!" ;
		}
	}
	return $res ;
}

//	Destroy session
//	Parameter:
//	  touchdownid : session id to destroy
function destroysession()
{
	$_SESSION=array();
	session_write();
	header_remove("Set-Cookie"); 
	$res = array(
		'status' => "OK",
	);
	return $res ;
}

// authenticate session
// Parameter:
//   touchdownid : session id
//   vendor	: vender id  ( transfinder vender id)
//   time	: unix time stamp
//	 nonce	: (optional) client side nonce
//	 algo   : (optional) has_hmac algorithm, support md5/sha1/sha256, default is sha1 if omitted
//   encode : (optional) signature encoding mode, hex/raw/base64, default is hex
//	 signature : hash_hmac signature , 
//			$key = vender key (transfinder vender key)
//			$data = "vender:<venderId>;time:<unixTimestamp>;touchdownid:<sessionId>[;nonce:<clientnonce>]"
function authenticate()
{
	$res = array(
		'status' => "ERROR"
	);
	if( empty($_SESSION['transfinderTag']) || $_SESSION['transfinderTag'] != 'transfinder' ) {
		$res['errormsg'] = "Invalid touchdownid, please call <createsession> again!" ;
	}
	else {
		$usernumber = 0 ;
		global $smart_host, $smart_user, $smart_password, $smart_database ;
		@$conn = new mysqli("p:".$smart_host, $smart_user, $smart_password, $smart_database );
		$sql="SELECT count(*) FROM app_user" ;
		if( $result = $conn->query($sql) ) {
			if( $row = $result->fetch_array() ) {
				$usernumber = $row[0];
			}
		}
		if( $usernumber>0 ) {
			if( empty($_REQUEST["vendor"]) || empty( $_REQUEST["time"] ) ) {
				$res['errormsg'] = "Invalid parameter, please specify <vendor> and <time>!" ;	
				return $res ;
			}
			
			$touchdownid = session_id();
			$data = "vendor:$_REQUEST[vendor];time:$_REQUEST[time];touchdownid:$touchdownid" ;
			if( !empty( $_REQUEST['nonce'] ) ) {
				$data.=";nonce:$_REQUEST[nonce]" ;
			}

			$transfinder_keyfile = 'client/'.$_SESSION['clientid'].'/transfinder_key' ;
			if( file_exists( $transfinder_keyfile ) ) {
				@$key = file_get_contents($transfinder_keyfile);
			}

			if(!empty($key) ) {
				// vendor key originally base64 encoded
				$key = base64_decode($key);
			}
			else {
				// demo key
				$key = "key" ;
			}

			$algo = "sha1" ;
			if( !empty( $_REQUEST['algo']) ) {
				$algo = $_REQUEST['algo'] ;
			}

			if( !empty( $_REQUEST['encode'] ) && $_REQUEST['encode'] == "raw" ) {
				$signature = hash_hmac( $algo, $data, $key, true ) ;
			}
			else if( !empty( $_REQUEST['encode'] ) && $_REQUEST['encode'] == "base64" ) {
				$signature = hash_hmac( $algo, $data, $key, true ) ;
				$signature = base64_encode($signature);
			}
			else {
				// hex by default
				$signature = hash_hmac( $algo, $data, $key );
			}
			
			// verify
			if( $signature == $_REQUEST['signature'] ) {
				
				$_SESSION['xtime']= time() ;	
				$_SESSION['release']= file_get_contents("release") ;
				$_SESSION['remote']=$_SERVER['REMOTE_ADDR'] ;
				$_SESSION['user']="user_transfinder";
				$_SESSION['user_type']="user";
				$_SESSION['welcome_name'] = "user_transfinder" ;
				
				session_write();
			
				$res['status'] = "OK" ;
			}
			else {
				$res['errormsg'] = "Signature error!" ;			
			}
		}
		else {
			$res['errormsg'] = "Invalid client id!" ;			
		}
	}
	return $res ;
}

// get available vehicle list
// Parameter:
//   touchdownid : session id
function listvehicle()
{
	global $conn ;
	$res = array(
		'status' => "ERROR",
	);
	
	$vehicle_list = array();
	$sql="SELECT vehicle_name , vehicle_vin FROM vehicle" ;
	if( !empty( $conn ) && $result = $conn->query($sql) ) {
		while( $row = $result->fetch_array() ) {
			$vehicle_list[] = array(
				'name' => $row[0] ,
				'vin' => $row[1]
			);
		}
	}
	if( empty($vehicle_list) ){
		$res['status'] = "ERROR" ;
		$res['errormsg'] = "No vehicle available!" ;
	}
	else {
		$res['status'] = "OK" ;		
		$res['vehicle_list'] = $vehicle_list ;
	}
	
	return $res ;
}


// list video clips
// Parameter:
//   touchdownid : session id
//   vehiclename : vehicle name
//   channel :	  camera channel (optional, omitted to list all channels)
//   starttime :  time range for video clip list (optional)
//   endtime :
function listvideoclips()
{
	global $conn ;
	$res = array(
		'status' => "ERROR",
	);
	if( empty($_REQUEST['vehiclename']) ) {
		$res['errormsg'] = "Require parameter <vehiclename>!" ;
		return $res ;
	}
	$clip_list = array();
	$sql="SELECT `index`, time_start, time_end, channel from videoclip WHERE vehicle_name = '$_REQUEST[vehiclename]'" ;
	if( isset($_REQUEST['channel']) ) {
		$sql .= " AND channel = '$_REQUEST[channel]'" ;
	}
	if( !empty($_REQUEST['endtime']) ) {
		$sql .= " AND time_start < '$_REQUEST[endtime]'" ;
	}
	if( !empty($_REQUEST['starttime']) ) {
		$sql .= " AND time_end > '$_REQUEST[starttime]'" ;
	}
	$sql .= " ORDER BY `time_start`";
	
	if( $result = $conn->query($sql) ) {
		$clip_list = $result->fetch_all(MYSQLI_ASSOC) ;
	}
	if( empty($clip_list) ){
		$res['status'] = "ERROR" ;
		$res['errormsg'] = "No video available!" ;
	}
	else {
		$res['status'] = "OK" ;		
		$res['vehicle_name'] = $_REQUEST['vehiclename'] ;		
		$res['time_start'] = $clip_list[0]['time_start'] ;
		$res['time_end'] = $clip_list[count($clip_list)-1]['time_end'] ;
		$res['clip_list'] = $clip_list ;
	}
	
	return $res ;
}

function local_getjson( $script, $param )
{
	$script = "http://localhost".dirname( $_SERVER["SCRIPT_NAME"])."/$script" ;
	
	$js = $script."?".http_build_query($param) ;
	header( "x-js: $js" );
	
    $jv = file_get_contents( $script."?".http_build_query($param));
	return json_decode( $jv, true ) ;
}

// list vehicles available for live view
// Parameter:
//   touchdownid : session id
function listlivevehicle()
{
	$res = array(
		'status' => "ERROR",
	);
	
	$vltpage = rand( 100000, 500000 ) ;
	$vltserial = 10000 ;
	//      vltserial : serial number for request
	//      vltpage : page number
	$sessionname = session_name() ;
	$sessionid =  session_id() ;
	$param = array(
		session_name() => session_id() ,
		'vltserial' => $vltserial ,
		'vltpage' => $vltpage 
	);

	$dvrlist = local_getjson( 'vltdvrlist.php', $param ) ;

	// $res['dvrlist'] = $dvrlist ;
	
	if( empty($dvrlist['res']) ) {
		return $res ;
	}
	
	@$tdwebc = $dvrlist['tdwebc'] ;
	
	for( $loop=0; empty($tdwebc) && $loop<5 ; $loop++ ) {
		$param['vltserial']++ ;
		$report = local_getjson( 'vltreport.php', $param ) ;

		// $res['report'] = $report ;
		
		@$tdwebc = $report['tdwebc'] ;
	}

	// finish vlt session
	$param['vltserial']++ ;
	local_getjson( 'vltunload.php', $param ) ;

	if( !empty($tdwebc) ) {
		for( $i=0; $i<count($tdwebc); $i++ ) {
			if(!empty( $tdwebc[$i]['avlp']['list']['item'] )) {
				$vehicle_list = $tdwebc[$i]['avlp']['list']['item'] ;
				$res[ 'vehicle_list' ] = array() ;
				
				if( isset( $vehicle_list['dvrid'] )) {
					$vehicle_list['name'] = $vehicle_list['dvrid'] ;
					$res[ 'vehicle_list' ][] = $vehicle_list ;
				}
				else {
					for( $v=0; $v<count($vehicle_list); $v++ ) {
						$$vehicle_list[$v]['name'] = $$vehicle_list[$v]['dvrid'] ;
						$res[ 'vehicle_list' ][] = $vehicle_list[$v] ;
					}
				}
				$res[ 'status' ] = "OK";
								
				$_SESSION['vltlist'] = $res[ 'vehicle_list' ] ;
				session_write();
				break ;
			}
		}
	}

	return $res ;
}

// Get live view context
//   phone : 	phone number of vehicle (or use vehiclename)
//   vehiclename : vehicle name (get from listlivevehicle)
function liveviewcontext()
{
	$vlt = null ;
	if(!empty($_REQUEST['phone'])) {
		$sname='phone' ;
		$sv = $_REQUEST['phone'] ;
	}
	else if(!empty($_REQUEST['vehiclename'])) {
		$sname='name' ;
		$sv = $_REQUEST['vehiclename'] ;
	}
	else {
		header( "X-tdc-errormsg: no vehicle specified");
		return null ;
	}
	if( !empty($_SESSION['vltlist']) ) {
		for( $i=0; $i<count($_SESSION['vltlist']); $i++ ) {
			if( $sv == $_SESSION['vltlist'][$i][$sname] ) {
				$vlt = $_SESSION['vltlist'][$i] ;
				break ;
			}
		}
	}
	if( empty( $vlt ) ) {
		header( "X-tdc-errormsg: vehicle not found");
		return null ;
	}
	
	$vlt['dvrid'] = $vlt['name'] ;
	$vlt['support_live'] = 1 ;
	$vlt['support_playback'] = 0 ;
	$vlt['playmode'] = "live" ;
	
	// assing vlt['encoder']
	if( empty( $vlt['type'] ) || (int)$vlt['type'] == 5 ) {
		$vlt['encoder'] = "266" ;		// support 266 only now
	}

	global $liveplay_protocol, $liveplay_host, $liveplay_port ;
	$server = array();
	$server['protocol'] = "dvr" ;		// this default protocol
	
	if (!empty($liveplay_protocol)){
		$server['protocol'] = $liveplay_protocol  ;
		if( !empty( $liveplay_host ) ) {
			$server['host'] = $liveplay_host ;
		}
		if( !empty( $liveplay_port ) ) {
			$server['port'] = $liveplay_port ;
		}				
		if( $server['protocol'] == "relay" ) {
			$vlt['support_relay'] = 1 ;
			if( empty( $server['host'] ) ) {
				$server['host'] = file_get_contents("http://tdlive.darktech.org/vlt/myip.php");
			}
		}
	}
	
	return array(
		'server' => $server ,
		'info' => $vlt
	);
	
}

// Request to upload video clip to server
// Parameter:
//   vehiclename : vehicle name 
//   starttime   : requested video start time
//   duration    : video duration (in seconds)
function requestvideoupload()
{
	global $conn ;
	$res = array(
		'status' => "ERROR",
	);
	
	if( empty($_REQUEST['vehiclename']) || empty($_REQUEST['starttime']) || empty($_REQUEST['duration']) ) {
		$res['errormsg']="Wrong parameters!";
	}
	else {
		$starttime = new DateTime($_REQUEST['starttime']);
		$endtime = $starttime ;
		$endtime->add( new DateInterval("PT$_REQUEST[duration]S"));
		$endtime=$endtime->format('Y-m-d H:i:s');
		$starttime=$starttime->format('Y-m-d H:i:s');
		
		$sql="INSERT INTO vmq (`vmq_vehicle_name`,`vmq_ins_user_name`,`vmq_start_time`,`vmq_end_time`,`vmq_description`) VALUES (
		'$_REQUEST[vehiclename]','$_SESSION[user]','$starttime','$endtime','Transfinder request.');" ;

		if( $conn->query($sql) ) {
			$res['status'] = "OK" ;		
			$res['starttime'] = $starttime ;
		}
		else {
			$resp['errormsg']="Request failed!";
		}
	}
	return $res ;
}


// check transfinder session
function check_tfsession()
{
	global $conn ;
	return (!empty($_SESSION['transfinderTag'])) && 
			$_SESSION['transfinderTag'] == 'transfinder' &&
			(!empty($_SESSION['user'])) &&
			(!empty($conn));
}

$result = array(
	'status' => "ERROR",
	'errormsg' => "Unknown command!"
);

// include function to get playercontext
include_once 'playercontext.php' ;

if( !empty( $_REQUEST['cmd'] )) 
switch ( $_REQUEST['cmd'] ) {
	case 'createsession':		
		$result = createsession();
		break;
		
	case 'destroysession':			
		$result = destroysession();
		break;

	case 'authenticate':		
		$result = authenticate();
		break;

	case 'listvehicle':	
		if( check_tfsession() ) {
			$result = listvehicle();
		}
		else {
			$result['errormsg'] = "Session error!" ;
		}
		break;

	case 'listvideoclips' :
		if( check_tfsession() ) {
			$result = listvideoclips();
		}
		else {
			$result['errormsg'] = "Session error!" ;
		}
		break;
		
	case 'getplaybackcontext' :
		// Parameter:
		//   touchdownid : session id
		//   vehiclename : vehicle name
		//   playtime : play back time
		//   dpl :  (optional) 1 = outpout dpl header, omit or 0 = output json context
		if( check_tfsession() ) {
			$result = playbackcontext( null, $_REQUEST['vehiclename'], $_REQUEST['playtime'] );
			if( empty($result) ) {
				$result = array(
					'status' => "ERROR",
					'errormsg' => "No result!"
				);				
			}
			else {
				if( !empty( $_REQUEST['dpl'] ) ) {
					header( "Content-Type: application/x-touchdown-playlist" );
					header( "Content-Disposition: attachment; filename=\"touchdown.dpl\"" );			
					echo "#DPL\r\n" ;
					echo "# Content-Type: JSON\r\n" ;
					echo "# Touch Down Center ". $_SESSION['release']."\r\n\r\n" ;
					echo json_encode( $result );
					return ;
				}
				$result['status'] = 'OK' ;
			}			
		}
		else {
			$result['errormsg'] = "Session error!" ;
		}
		break;
		
	case 'listlivevehicle':	
		if( check_tfsession() ) {
			$result = listlivevehicle();
		}
		else {
			$result['errormsg'] = "Session error!" ;
		}
		break;
		
	case 'getliveviewcontext' :
		// Parameter:
		//   touchdownid : session id
		//   phone : 	phone number of vehicle (or use vehiclename)
		//   vehiclename : vehicle name (get from listlivevehicle)
		//   dpl :  (optional) 1 = outpout dpl header, omit or 0 = output json context
		if( check_tfsession() ) {
			$result = liveviewcontext();
			if( empty($result) ) {
				$result = array(
					'status' => "ERROR",
					'errormsg' => "No result!"
				);				
			}
			else {
				if( !empty( $_REQUEST['dpl'] ) ) {
					header( "Content-Type: application/x-touchdown-playlist");
					header( "Content-Disposition: attachment; filename=\"touchdown.dpl\"" );
					echo "#DPL\r\n" ;
					echo "# Content-Type: JSON\r\n" ;
					echo "# Touch Down Center ". $_SESSION['release']."\r\n\r\n" ;
					echo json_encode( $result );
					return ;
				}
				$result['status'] = 'OK' ;
			}			
		}
		else {
			$result['errormsg'] = "Session error!" ;
		}
		break;
		
	case 'requestvideoupload' :
		// Parameter:
		//   touchdownid : session id
		//   vehiclename : vehicle name 
		//   starttime   : requested video start time
		//   duration    : video duration
		if( check_tfsession() ) {
			$result = requestvideoupload();
		}
		else {
			$result['errormsg'] = "Session error!" ;
		}
		break;		
		
	default :
		break;
}

if( !empty( $result ) ) {
	header("Content-Type: application/json");
	echo json_encode( $result, JSON_PRETTY_PRINT );
}

?>